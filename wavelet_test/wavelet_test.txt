21 March 2023   9:41:00.560 PM
 
Wavelet_test():
  FORTRAN90 version
  Test wavelet().
 
TEST01
  DAUB2_TRANSFORM computes the DAUB2 transform of a vector.
  DAUB2_TRANSFORM_INVERSE inverts it.
 
   i      U          D2(U)    D2inv(D2(U))
 
   1      0.9650      2.7157      0.9650
   2      0.9541      0.1722      0.9541
   3      0.8472      0.3287      0.8472
   4      0.5865     -0.5391      0.5865
   5      0.1796      0.2427      0.1796
   6      0.5967     -0.4352      0.5967
   7      0.8234      0.7773      0.8234
   8      0.8232      0.1234      0.8232
   9      0.7643      0.0077      0.7643
  10      0.9035      0.1844      0.9035
  11      0.0080     -0.2950      0.0080
  12      0.1053      0.0002      0.1053
  13      0.9754     -0.0984      0.9754
  14      0.8010     -0.0688      0.8010
  15      0.7645      0.1233      0.7645
  16      0.7651     -0.0004      0.7651
 
   i      U          D2(U)    D2inv(D2(U))
 
   1      1.0000      2.8284      1.0000
   2      1.0000      0.0000      1.0000
   3      1.0000      0.0000      1.0000
   4      1.0000      0.0000      1.0000
   5      1.0000      0.0000      1.0000
   6      1.0000      0.0000      1.0000
   7      1.0000      0.0000      1.0000
   8      1.0000      0.0000      1.0000
 
   i      U          D2(U)    D2inv(D2(U))
 
   1      1.0000     34.0000      1.0000
   2      2.0000    -16.0000      2.0000
   3      3.0000     -5.6569      3.0000
   4      4.0000     -5.6569      4.0000
   5      5.0000     -2.0000      5.0000
   6      6.0000     -2.0000      6.0000
   7      7.0000     -2.0000      7.0000
   8      8.0000     -2.0000      8.0000
   9      9.0000     -0.7071      9.0000
  10     10.0000     -0.7071     10.0000
  11     11.0000     -0.7071     11.0000
  12     12.0000     -0.7071     12.0000
  13     13.0000     -0.7071     13.0000
  14     14.0000     -0.7071     14.0000
  15     15.0000     -0.7071     15.0000
  16     16.0000     -0.7071     16.0000
 
   i      U          D2(U)    D2inv(D2(U))
 
   1     25.0000     21.2132     25.0000
   2     16.0000     16.9706     16.0000
   3      9.0000     14.0000      9.0000
   4      4.0000     -2.0000      4.0000
   5      1.0000      6.3640      1.0000
   6      0.0000      3.5355     -0.0000
   7      1.0000      0.7071      1.0000
   8      4.0000     -2.1213      4.0000
 
TEST02
  DAUB4_TRANSFORM computes the DAUB4 transform of a vector.
  DAUB4_TRANSFORM_INVERSE inverts it.
 
   i      U          D4(U)    D4inv(D4(U))
 
   1      0.1859      1.5881      0.1859
   2      0.3605      0.7354      0.3605
   3      0.9724      0.0339      0.9724
   4      0.8250      0.4042      0.8250
   5      0.4346     -0.3772      0.4346
   6      0.1783      0.4139      0.1783
   7      0.5496      0.0903      0.5496
   8      0.5406     -0.2694      0.5406
   9      0.6899      0.3101      0.6899
  10      0.6549     -0.0334      0.6549
  11      0.1156      0.1024      0.1156
  12      0.0731      0.0685      0.0731
  13      0.5473     -0.1747      0.5473
  14      0.1414      0.3581      0.1414
  15      0.1899      0.0019      0.1899
  16      0.1127     -0.0684      0.1127
 
   i      U          D4(U)    D4inv(D4(U))
 
   1      1.0000      2.0000      1.0000
   2      1.0000      2.0000      1.0000
   3      1.0000      0.0000      1.0000
   4      1.0000      0.0000      1.0000
   5      1.0000      0.0000      1.0000
   6      1.0000      0.0000      1.0000
   7      1.0000      0.0000      1.0000
   8      1.0000      0.0000      1.0000
 
   i      U          D4(U)    D4inv(D4(U))
 
   1      1.0000     15.8659      1.0000
   2      2.0000     32.2173      2.0000
   3      3.0000      1.8117      3.0000
   4      4.0000    -10.5744      4.0000
   5      5.0000      0.0000      5.0000
   6      6.0000      0.0000      6.0000
   7      7.0000      0.7321      7.0000
   8      8.0000     -7.6603      8.0000
   9      9.0000      0.0000      9.0000
  10     10.0000      0.0000     10.0000
  11     11.0000      0.0000     11.0000
  12     12.0000      0.0000     12.0000
  13     13.0000      0.0000     13.0000
  14     14.0000      0.0000     14.0000
  15     15.0000      0.0000     15.0000
  16     16.0000     -5.6569     16.0000
 
   i      U          D4(U)    D4inv(D4(U))
 
   1     25.0000     18.7321     25.0000
   2     16.0000     11.2679     16.0000
   3      9.0000     -8.6603      9.0000
   4      4.0000     17.0526      4.0000
   5      1.0000     -1.2247      1.0000
   6      0.0000     -1.2247      0.0000
   7      1.0000     -1.2247      1.0000
   8      4.0000     12.1595      4.0000
 
TEST03
  DAUB6_TRANSFORM computes the DAUB6 transform of a vector.
  DAUB6_TRANSFORM_INVERSE inverts it.
 
   i      U          D6(U)    D6inv(D6(U))
 
   1      0.3665      1.9534      0.3665
   2      0.2412      0.9294      0.2412
   3      0.0600     -0.3257      0.0600
   4      0.4481      0.1234      0.4481
   5      0.1319      0.0146      0.1319
   6      0.9923     -0.0689      0.9923
   7      0.8746     -0.0253      0.8746
   8      0.5425      0.4690      0.5425
   9      0.9220     -0.4043      0.9220
  10      0.6548      0.0915      0.6548
  11      0.8181      0.2479      0.8181
  12      0.5972      0.1130      0.5972
  13      0.4420     -0.0209      0.4420
  14      0.2429      0.4443      0.2429
  15      0.7096      0.1053      0.7096
  16      0.1103     -0.2266      0.1103
 
   i      U          D6(U)    D6inv(D6(U))
 
   1      1.0000      2.0000      1.0000
   2      1.0000      2.0000      1.0000
   3      1.0000      0.0000      1.0000
   4      1.0000      0.0000      1.0000
   5      1.0000      0.0000      1.0000
   6      1.0000      0.0000      1.0000
   7      1.0000      0.0000      1.0000
   8      1.0000      0.0000      1.0000
 
   i      U          D6(U)    D6inv(D6(U))
 
   1      1.0000     22.6778      1.0000
   2      2.0000     25.4054      2.0000
   3      3.0000    -11.0375      3.0000
   4      4.0000      8.0787      4.0000
   5      5.0000      0.0000      5.0000
   6      6.0000      2.1102      6.0000
   7      7.0000     -8.8180      7.0000
   8      8.0000      2.3832      8.0000
   9      9.0000      0.0000      9.0000
  10     10.0000      0.0000     10.0000
  11     11.0000      0.0000     11.0000
  12     12.0000      0.0000     12.0000
  13     13.0000      0.0000     13.0000
  14     14.0000      0.0000     14.0000
  15     15.0000     -7.5875     15.0000
  16     16.0000      1.9307     16.0000
 
   i      U          D6(U)    D6inv(D6(U))
 
   1     25.0000      9.5264     25.0000
   2     16.0000     20.4736     16.0000
   3      9.0000     13.7048      9.0000
   4      4.0000    -10.5832      4.0000
   5      1.0000      0.0000      1.0000
   6      0.0000      0.0000      0.0000
   7      1.0000     12.9103      1.0000
   8      4.0000     -4.4250      4.0000
 
TEST04
  DAUB8_TRANSFORM computes the DAUB8 transform of a vector.
  DAUB8_TRANSFORM_INVERSE inverts it.
 
   i      U          D8(U)    D8inv(D8(U))
 
   1      0.1002      1.2915      0.1002
   2      0.3310      0.9896      0.3310
   3      0.7564     -0.2634      0.7564
   4      0.5439      0.2218      0.5439
   5      0.5087     -0.1974      0.5087
   6      0.1593      0.2533      0.1593
   7      0.6084     -0.3971      0.6084
   8      0.2645     -0.1484      0.2645
   9      0.9453      0.3723      0.9453
  10      0.4412      0.4098      0.4412
  11      0.2049     -0.2827      0.2049
  12      0.7897     -0.3072      0.7897
  13      0.1841      0.0649      0.1841
  14      0.1362     -0.2159      0.1362
  15      0.1445      0.2641      0.1445
  16      0.3333      0.0151      0.3333
 
   i      U          D8(U)    D8inv(D8(U))
 
   1      1.0000      2.0000      1.0000
   2      1.0000      2.0000      1.0000
   3      1.0000      0.0000      1.0000
   4      1.0000      0.0000      1.0000
   5      1.0000      0.0000      1.0000
   6      1.0000      0.0000      1.0000
   7      1.0000      0.0000      1.0000
   8      1.0000      0.0000      1.0000
 
   i      U          D8(U)    D8inv(D8(U))
 
   1      1.0000     29.6611      1.0000
   2      2.0000     18.4222      2.0000
   3      3.0000     10.2278      3.0000
   4      4.0000     -6.6350      4.0000
   5      5.0000      3.4852      5.0000
   6      6.0000     -6.3549      6.0000
   7      7.0000      2.6205      7.0000
   8      8.0000     -0.6777      8.0000
   9      9.0000      0.0000      9.0000
  10     10.0000      0.0000     10.0000
  11     11.0000      0.0000     11.0000
  12     12.0000      0.0000     12.0000
  13     13.0000      0.0000     13.0000
  14     14.0000     -7.7515     14.0000
  15     15.0000      2.7903     15.0000
  16     16.0000     -0.6957     16.0000
 
   i      U          D8(U)    D8inv(D8(U))
 
   1     25.0000      2.8040     25.0000
   2     16.0000     27.1960     16.0000
   3      9.0000     -8.0573      9.0000
   4      4.0000      5.4746      4.0000
   5      1.0000      0.0000      1.0000
   6      0.0000     11.4375     -0.0000
   7      1.0000     -4.5132      1.0000
   8      4.0000      1.5609      4.0000
 
TEST05
  DAUB10_TRANSFORM computes the DAUB10 transform of a vector.
  DAUB10_TRANSFORM_INVERSE inverts it.
 
   i      U         D10(U)   D10inv(D10(U))
 
   1      0.0112      1.4588      0.0112
   2      0.3658      0.9490      0.3658
   3      0.9022     -0.0437      0.9022
   4      0.4126     -0.1637      0.4126
   5      0.3856      0.7108      0.3856
   6      0.0183     -0.4676      0.0183
   7      0.2751     -0.0715      0.2751
   8      0.3956     -0.1045      0.3956
   9      0.7003      0.0523      0.7003
  10      0.5069      0.1214      0.5069
  11      0.6502      0.3168      0.6502
  12      0.5775      0.5057      0.5775
  13      0.9711     -0.0356      0.9711
  14      0.0665      0.1975      0.0665
  15      0.5625      0.1441      0.5625
  16      0.0088      0.1873      0.0088
 
   i      U         D10(U)   D10inv(D10(U))
 
   1      1.0000      2.0000      1.0000
   2      1.0000      2.0000      1.0000
   3      1.0000     -0.0000      1.0000
   4      1.0000     -0.0000      1.0000
   5      1.0000     -0.0000      1.0000
   6      1.0000     -0.0000      1.0000
   7      1.0000     -0.0000      1.0000
   8      1.0000     -0.0000      1.0000
 
   i      U         D10(U)   D10inv(D10(U))
 
   1      1.0000     33.9013      1.0000
   2      2.0000     14.1820      2.0000
   3      3.0000      0.8949      3.0000
   4      4.0000      7.7442      4.0000
   5      5.0000     -2.2792      5.0000
   6      6.0000      0.6621      6.0000
   7      7.0000     -0.5141      7.0000
   8      8.0000      4.6989      8.0000
   9      9.0000      0.0000      9.0000
  10     10.0000     -0.0000     10.0000
  11     11.0000     -0.0000     11.0000
  12     12.0000     -0.0000     12.0000
  13     13.0000     -7.0996     13.0000
  14     14.0000      2.2745     14.0000
  15     15.0000     -1.0863     15.0000
  16     16.0000      0.2547     16.0000
 
   i      U         D10(U)   D10inv(D10(U))
 
   1     25.0000      0.6414     25.0000
   2     16.0000     29.3586     16.0000
   3      9.0000     -4.9374      9.0000
   4      4.0000     -2.7026      4.0000
   5      1.0000      9.6613      1.0000
   6      0.0000     -2.3231     -0.0000
   7      1.0000      1.7099      1.0000
   8      4.0000     -0.5627      4.0000
 
TEST06
  DAUB12_TRANSFORM computes the DAUB12 transform of a vector.
  DAUB12_TRANSFORM_INVERSE inverts it.
 
   i      U         D12(U)   D12inv(D12(U))
 
   1      0.6071      1.5981      0.6071
   2      0.1300      2.1146      0.1300
   3      0.9443      0.0924      0.9443
   4      0.7566      0.3555      0.7566
   5      0.9054     -0.0936      0.9054
   6      0.8927      0.2546      0.8927
   7      0.9359     -0.1116      0.9359
   8      0.7030      0.3213      0.7030
   9      0.4121      0.0414      0.4121
  10      0.6413      0.5357      0.6413
  11      0.8444     -0.1160      0.8444
  12      0.2066      0.3095      0.2066
  13      0.8778      0.4261      0.8778
  14      0.7379      0.0359      0.7379
  15      0.5924      0.0578      0.5924
  16      0.3133     -0.0617      0.3133
 
   i      U         D12(U)   D12inv(D12(U))
 
   1      1.0000      2.0000      1.0000
   2      1.0000      2.0000      1.0000
   3      1.0000     -0.0000      1.0000
   4      1.0000     -0.0000      1.0000
   5      1.0000     -0.0000      1.0000
   6      1.0000     -0.0000      1.0000
   7      1.0000     -0.0000      1.0000
   8      1.0000     -0.0000      1.0000
 
   i      U         D12(U)   D12inv(D12(U))
 
   1      1.0000     33.8275      1.0000
   2      2.0000     14.2558      2.0000
   3      3.0000      2.1504      3.0000
   4      4.0000      8.4620      4.0000
   5      5.0000     -2.0978      5.0000
   6      6.0000      0.7718      6.0000
   7      7.0000      4.9808      7.0000
   8      8.0000      1.8663      8.0000
   9      9.0000      0.0000      9.0000
  10     10.0000      0.0000     10.0000
  11     11.0000     -0.0000     11.0000
  12     12.0000     -6.1293     12.0000
  13     13.0000      0.8448     13.0000
  14     14.0000     -0.6992     14.0000
  15     15.0000      0.4205     15.0000
  16     16.0000     -0.0937     16.0000
 
   i      U         D12(U)   D12inv(D12(U))
 
   1     25.0000      3.4826     25.0000
   2     16.0000     26.5174     16.0000
   3      9.0000      3.1103      9.0000
   4      4.0000    -14.2867      4.0000
   5      1.0000      0.6993      1.0000
   6      0.0000      0.3127     -0.0000
   7      1.0000     -0.6453      1.0000
   8      4.0000      8.1186      4.0000
 
TEST07
  DAUB14_TRANSFORM computes the DAUB14 transform of a vector.
  DAUB14_TRANSFORM_INVERSE inverts it.
 
   i      U         D14(U)   D14inv(D14(U))
 
   1      0.1002      1.3040      0.1002
   2      0.1641      1.6507      0.1641
   3      0.9411      0.2057      0.9411
   4      0.2133     -0.1697      0.2133
   5      0.5801     -0.3049      0.5801
   6      0.4501      0.1922      0.4501
   7      0.5427      0.2575      0.5427
   8      0.7195     -0.0432      0.7195
   9      0.5243      0.6201      0.5243
  10      0.9971     -0.2056      0.9971
  11      0.6892     -0.5735      0.6892
  12      0.0103      0.3810      0.0103
  13      0.8169      0.4419      0.8169
  14      0.5666     -0.0556      0.5666
  15      0.1538     -0.1491      0.1538
  16      0.8880     -0.2195      0.8880
 
   i      U         D14(U)   D14inv(D14(U))
 
   1      1.0000      2.0000      1.0000
   2      1.0000      2.0000      1.0000
   3      1.0000     -0.0000      1.0000
   4      1.0000     -0.0000      1.0000
   5      1.0000      0.0000      1.0000
   6      1.0000      0.0000      1.0000
   7      1.0000      0.0000      1.0000
   8      1.0000      0.0000      1.0000
 
   i      U         D14(U)   D14inv(D14(U))
 
   1      1.0000     29.6608      1.0000
   2      2.0000     18.4225      2.0000
   3      3.0000     12.9282      3.0000
   4      4.0000     -3.9207      4.0000
   5      5.0000      2.3559      5.0000
   6      6.0000      4.0176      6.0000
   7      7.0000      5.2726      7.0000
   8      8.0000     -4.2163      8.0000
   9      9.0000      0.0000      9.0000
  10     10.0000      0.0000     10.0000
  11     11.0000     -5.0990     11.0000
  12     12.0000     -0.9494     12.0000
  13     13.0000      0.3327     13.0000
  14     14.0000      0.1838     14.0000
  15     15.0000     -0.1595     15.0000
  16     16.0000      0.0345     16.0000
 
   i      U         D14(U)   D14inv(D14(U))
 
   1     25.0000     10.1637     25.0000
   2     16.0000     19.8363     16.0000
   3      9.0000    -19.7295      9.0000
   4      4.0000      7.1017      4.0000
   5      1.0000     -1.8202      1.0000
   6      0.0000      0.1349      0.0000
   7      1.0000      6.5820      1.0000
   8      4.0000      3.5885      4.0000
 
TEST08
  DAUB16_TRANSFORM computes the DAUB16 transform of a vector.
  DAUB16_TRANSFORM_INVERSE inverts it.
 
   i      U         D16(U)   D16inv(D16(U))
 
   1      0.3777      1.0363      0.3777
   2      0.6643      1.6922      0.6643
   3      0.0328      0.2278      0.0328
   4      0.1366      0.3276      0.1366
   5      0.3840     -0.6668      0.3840
   6      0.9209     -0.1857      0.9209
   7      0.5225     -0.2141      0.5225
   8      0.9835     -0.1438      0.9835
   9      0.4648      0.2910      0.4648
  10      0.7697      0.1292      0.7697
  11      0.3528     -0.2784      0.3528
  12      0.0144     -0.0550      0.0144
  13      0.9280     -0.2692      0.9280
  14      0.5387     -0.3446      0.5387
  15      0.5489     -0.2276      0.5489
  16      0.0776      0.4052      0.0776
 
   i      U         D16(U)   D16inv(D16(U))
 
   1      1.0000      2.0000      1.0000
   2      1.0000      2.0000      1.0000
   3      1.0000     -0.0000      1.0000
   4      1.0000     -0.0000      1.0000
   5      1.0000     -0.0000      1.0000
   6      1.0000     -0.0000      1.0000
   7      1.0000     -0.0000      1.0000
   8      1.0000     -0.0000      1.0000
 
   i      U         D16(U)   D16inv(D16(U))
 
   1      1.0000     23.2267      1.0000
   2      2.0000     24.8566      2.0000
   3      3.0000     -7.9222      3.0000
   4      4.0000     12.3873      4.0000
   5      5.0000      2.2335      5.0000
   6      6.0000      7.4874      6.0000
   7      7.0000     -4.9149      7.0000
   8      8.0000      3.1858      8.0000
   9      9.0000     -0.0000      9.0000
  10     10.0000     -4.1353     10.0000
  11     11.0000     -2.6909     11.0000
  12     12.0000      1.6001     12.0000
  13     13.0000     -0.4523     13.0000
  14     14.0000     -0.0248     14.0000
  15     15.0000      0.0590     15.0000
  16     16.0000     -0.0127     16.0000
 
   i      U         D16(U)   D16inv(D16(U))
 
   1     25.0000     18.3697     25.0000
   2     16.0000     11.6303     16.0000
   3      9.0000      7.8364      9.0000
   4      4.0000    -19.6433      4.0000
   5      1.0000      1.4352      1.0000
   6      0.0000      4.8312     -0.0000
   7      1.0000      6.0166      1.0000
   8      4.0000     -3.7977      4.0000
 
TEST09
  DAUB18_TRANSFORM computes the DAUB18 transform of a vector.
  DAUB18_TRANSFORM_INVERSE inverts it.
 
   i      U         D18(U)   D18inv(D18(U))
 
   1      0.7245      1.4381      0.7245
   2      0.2970      1.0624      0.2970
   3      0.8885     -0.0469      0.8885
   4      0.7317     -0.0202      0.7317
   5      0.1718      0.1913      0.1718
   6      0.1562      0.7013      0.1562
   7      0.5842      0.2472      0.5842
   8      0.8633     -0.2083      0.8633
   9      0.1692      0.3592      0.1692
  10      0.1313      0.4003      0.1313
  11      0.2985     -0.0273      0.2985
  12      0.4050     -0.1213      0.4050
  13      0.6581     -0.0169      0.6581
  14      0.3171     -0.2255      0.3171
  15      0.6006      0.2046      0.6006
  16      0.0753      0.2178      0.0753
 
   i      U         D18(U)   D18inv(D18(U))
 
   1      1.0000      2.0000      1.0000
   2      1.0000      2.0000      1.0000
   3      1.0000     -0.0000      1.0000
   4      1.0000     -0.0000      1.0000
   5      1.0000     -0.0000      1.0000
   6      1.0000     -0.0000      1.0000
   7      1.0000     -0.0000      1.0000
   8      1.0000     -0.0000      1.0000
 
   i      U         D18(U)   D18inv(D18(U))
 
   1      1.0000     17.1835      1.0000
   2      2.0000     30.8998      2.0000
   3      3.0000      6.9242      3.0000
   4      4.0000     -8.4011      4.0000
   5      5.0000      8.1545      5.0000
   6      6.0000     -4.0909      6.0000
   7      7.0000      2.6890      7.0000
   8      8.0000      0.3909      8.0000
   9      9.0000     -3.2921      9.0000
  10     10.0000     -4.1315     10.0000
  11     11.0000      2.6920     11.0000
  12     12.0000     -1.2341     12.0000
  13     13.0000      0.3396     13.0000
  14     14.0000     -0.0141     14.0000
  15     15.0000     -0.0212     15.0000
  16     16.0000      0.0047     16.0000
 
   i      U         D18(U)   D18inv(D18(U))
 
   1     25.0000     25.4016     25.0000
   2     16.0000      4.5984     16.0000
   3      9.0000    -14.0681      9.0000
   4      4.0000      5.1538      4.0000
   5      1.0000      2.9899      1.0000
   6      0.0000      7.9593     -0.0000
   7      1.0000     -5.0929      1.0000
   8      4.0000      2.6290      4.0000
 
TEST10
  DAUB20_TRANSFORM computes the DAUB20 transform of a vector.
  DAUB20_TRANSFORM_INVERSE inverts it.
 
   i      U         D20(U)   D20inv(D20(U))
 
   1      0.4743      1.6279      0.4743
   2      0.6062      1.3063      0.6062
   3      0.9807     -0.3776      0.9807
   4      0.4807     -0.2729      0.4807
   5      0.4240      0.2476      0.4240
   6      0.8583      0.0713      0.8583
   7      0.4603     -0.3692      0.4603
   8      0.7130     -0.5594      0.7130
   9      0.1759      0.2630      0.1759
  10      0.0374      0.1381      0.0374
  11      0.6734     -0.2804      0.6734
  12      0.2550     -0.2422      0.2550
  13      0.9327      0.0429      0.9327
  14      0.7745      0.5585      0.7745
  15      0.4368      0.0333      0.4368
  16      0.0160      0.0646      0.0160
 
   i      U         D20(U)   D20inv(D20(U))
 
   1      1.0000      2.0000      1.0000
   2      1.0000      2.0000      1.0000
   3      1.0000     -0.0000      1.0000
   4      1.0000     -0.0000      1.0000
   5      1.0000     -0.0000      1.0000
   6      1.0000     -0.0000      1.0000
   7      1.0000     -0.0000      1.0000
   8      1.0000     -0.0000      1.0000
 
   i      U         D20(U)   D20inv(D20(U))
 
   1      1.0000     13.9608      1.0000
   2      2.0000     34.1225      2.0000
   3      3.0000     -5.4653      3.0000
   4      4.0000     -1.4257      4.0000
   5      5.0000     -2.0651      5.0000
   6      6.0000      0.9615      6.0000
   7      7.0000     -0.9280      7.0000
   8      8.0000      7.0911      8.0000
   9      9.0000     -5.1642      9.0000
  10     10.0000      3.3321     10.0000
  11     11.0000     -1.8410     11.0000
  12     12.0000      0.7902     12.0000
  13     13.0000     -0.2125     13.0000
  14     14.0000      0.0170     14.0000
  15     15.0000      0.0074     15.0000
  16     16.0000     -2.5858     16.0000
 
   i      U         D20(U)   D20inv(D20(U))
 
   1     25.0000     29.0224     25.0000
   2     16.0000      0.9776     16.0000
   3      9.0000      0.1557      9.0000
   4      4.0000     -4.6465      4.0000
   5      1.0000      9.3796      1.0000
   6      0.0000     -5.5431     -0.0000
   7      1.0000      3.2247      1.0000
   8      4.0000      1.4242      4.0000
 
TEST11
  DAUB*_MATRIX computes the DAUB* matrix.
  Verify that each matrix is orthogonal.
 
  DAUB2,  N =   20  || A*A' - I|| =   0.993014E-15
  DAUB4,  N =   20  || A*A' - I|| =   0.526625E-15
  DAUB6,  N =   20  || A*A' - I|| =   0.100841E-14
  DAUB8,  N =   20  || A*A' - I|| =   0.263309E-14
  DAUB10, N =   20  || A*A' - I|| =   0.432929E-14
  DAUB12, N =   20  || A*A' - I|| =   0.920079E-14
 
TEST12
  DAUB*_SCALE uses recursion to estimate a scaling function.
 
   N        X       D2       D4       D6       D8      D10
 
     1   0.1023   1.0000   0.6830   0.4705   0.3258   0.2264
     2   0.1023   1.0000   0.4665   0.2213   0.1061   0.0513
     3   0.1023   1.0000   0.3186   0.1041   0.0346   0.0116
     4   0.1023   1.0000   0.3769   0.1188   0.0350   0.0099
     5   0.1023   1.0000   0.4061   0.1262   0.0349   0.0090
     6   0.1023   1.0000   0.3808   0.1097   0.0277   0.0064
 
     1   0.1638   1.0000   0.6830   0.4705   0.3258   0.2264
     2   0.1638   1.0000   0.4665   0.2213   0.1061   0.0513
     3   0.1638   1.0000   0.5519   0.2526   0.1073   0.0438
     4   0.1638   1.0000   0.4779   0.1866   0.0658   0.0218
     5   0.1638   1.0000   0.4964   0.1926   0.0656   0.0204
     6   0.1638   1.0000   0.4804   0.1789   0.0575   0.0166
 
     1   0.9885   1.0000   1.1830   1.1411   1.0109   0.8539
     2   0.9885   1.0000   1.2745   1.2123   1.0091   0.7735
     3   0.9885   1.0000   1.3203   1.2492   1.0084   0.7345
     4   0.9885   1.0000   1.3431   1.2677   1.0077   0.7152
     5   0.9885   1.0000   1.3546   1.2770   1.0075   0.7056
     6   0.9885   1.0000   1.3603   1.2817   1.0073   0.7009
 
     1   0.3473   1.0000   0.6830   0.4705   0.3258   0.2264
     2   0.3473   1.0000   0.8080   0.5369   0.3294   0.1933
     3   0.3473   1.0000   0.6998   0.3965   0.2020   0.0963
     4   0.3473   1.0000   0.7268   0.4094   0.2015   0.0903
     5   0.3473   1.0000   0.7404   0.4160   0.2013   0.0874
     6   0.3473   1.0000   0.7286   0.4014   0.1887   0.0788
 
     1   0.6465   1.0000   1.1830   1.1411   1.0109   0.8539
     2   0.6465   1.0000   1.0245   0.8428   0.6201   0.4253
     3   0.6465   1.0000   1.0641   0.8703   0.6184   0.3987
     4   0.6465   1.0000   1.0298   0.8081   0.5413   0.3235
     5   0.6465   1.0000   1.0113   0.7759   0.5033   0.2885
     6   0.6465   1.0000   1.0172   0.7796   0.5032   0.2857
 
wavelet_test():
  Normal end of execution.
 
21 March 2023   9:41:00.595 PM
